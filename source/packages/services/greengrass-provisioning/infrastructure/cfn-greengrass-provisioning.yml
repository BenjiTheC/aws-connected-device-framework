#-----------------------------------------------------------------------------------------------------------------------
#   Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance
#  with the License. A copy of the License is located at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
#  OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
#  and limitations under the License.
#-----------------------------------------------------------------------------------------------------------------------
AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: CDF Greengrass Provisioning Service

Globals:
  Api:
    OpenApiVersion: 3.0.1

Parameters:
  Environment:
    Description:  Name of environment.  Used to name the created resources.
    Type: String
    MinLength: 1

  ApplicationConfigurationOverride:
    Description: This allows you to override any configuration application configuration. Must be a JSON formatted string. Any configurations contained in this will override the configurations found and merged from the config files.
    Type: String
    MinLength: 1

  TemplateSnippetS3UriBase:
    Description: |
      S3 uri of directory where template snippets are stored for the account.
    Type: String
    MinLength: 1

  AuthType:
    Description: Authorization type to apply to the API gateway endpoints
    Type: String
    Default: None
    AllowedValues:
      - None
      - Private
      - Cognito
      - LambdaRequest
      - LambdaToken
      - ApiKey
      - IAM
    MinLength: 1

  ApiGatewayDefinitionTemplate:
    Description: |
      Name of the API Gateway Cloudformation definition along with the authorization method to use.  Use one of the provided
      templates to implement no auth, private, api key, lambda request, lamdba token, or Cognito auth, or modify one to meet your own
      authentization requirements.  The template must exist within the provided TemplateSnippetS3UriBase location.
    Type: String
    MinLength: 1

  VpcId:
    Description: ID of VPC to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  CDFSecurityGroupId:
    Description: ID of an existing CDF security group to deploy the API into. Only required if AuthType = 'Private'.
    Type: String
  PrivateSubNetIds:
    Description: Comma delimited list of private subnetIds to deploy the API into. Only required if AuthType = 'Private'.
    Type: CommaDelimitedList
  PrivateApiGatewayVPCEndpoint:
    Description: VPC endpoint. Only required if AuthType = 'Private'.
    Type: String

  CognitoUserPoolArn:
    Description: Cognito user pool arn.  Only required if AuthType is set to 'Cognito'.
    Type: String
    Default: 'N/A'

  AuthorizerFunctionArn:
    Description: Lambda authorizer function arn.  Only required if AuthType is set to 'LambdaRequest' or 'LambdaToken'.
    Type: String
    Default: 'N/A'

  ProvisionedConcurrentExecutions:
    Description: The no. of desired concurrent executions to  provision.  Set to 0 to disable.
    Type: Number
    Default: 0

  KmsKeyId:
    Description: The KMS key ID used to encrypt DynamoDB and SQS.
    Type: String

  EnableApiGatewayAccessLogs:
    Description: Enales API gateway Access Logging, defaults to false if not specified.
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
    MinLength: 1

  ProvisioningFunctionName:
    Description: Provisioning Api Gateway function name
    Type: String
    Default: ''

  ApplyAutoscaling:
    Description: If true, will apply auto-scaling as defined in `./cfn-autoscaling.yml'
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
    MinLength: 1

Conditions:

  DeployInVPC: !Not [ !Equals [ !Ref VpcId, 'N/A' ] ]
  DeployWithLambdaAuth: !Or [ !Equals [ !Ref AuthType, 'LambdaRequest' ], !Equals [ !Ref AuthType, 'LambdaToken' ] ]
  DeployWithProvisionedCapacity: !Not [ !Equals [ !Ref ProvisionedConcurrentExecutions, "0" ]]
  KmsKeyIdProvided: !Not [ !Equals [ !Ref KmsKeyId, "" ] ]
  EnableApiGatewayAccessLogs: !Equals [ !Ref EnableApiGatewayAccessLogs, "true"]
  DeployWithScaling: !Equals [ !Ref ApplyAutoscaling, "true" ]

Resources:

  ApiGatewayApi:
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}${ApiGatewayDefinitionTemplate}"
    DependsOn:
      - RESTLambdaFunction

  ApiGatewayAuthorizerInvokeRole:
    Condition: DeployWithLambdaAuth
    'Fn::Transform':
      Name: 'AWS::Include'
      Parameters:
        Location: !Sub "${TemplateSnippetS3UriBase}cfn-role-lambdaRequestAuthInvokerRole.yaml"
    DependsOn:
      - RESTLambdaFunction

  ApiGatewayAccessLogGroup:
    Condition: EnableApiGatewayAccessLogs
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub 'cdf-greengrassprovisioning-apigatewayaccesslogs-${Environment}'

  KmsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Condition: KmsKeyIdProvided
    Properties:
      Description: "cdf-provisioning policy for accessing KMS"
      Path: "/cdf/greengrass/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - 'kms:Decrypt'
              - 'kms:GenerateDataKey'
            Effect: Allow
            Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}"

  ApplicationPolicies:
    Type: 'AWS::IAM::ManagedPolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Lambda permissions to manage greengrass resources"
    Properties:
      Description: 'cdf-greengrass-deployment application policies'
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: sqs
            Action:
              - 'sqs:SendMessage'
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
            Effect: Allow
            Resource:
              - !GetAtt DeviceAssociationQueue.Arn
              - !GetAtt DlqQueue.Arn
              - !GetAtt DeploymentStatusQueue.Arn
              - !GetAtt DeploymentsQueue.Arn
              - !GetAtt BulkDeploymentsStatusQueue.Arn
              - !GetAtt GroupTasksQueue.Arn
          - Sid: lambda
            Effect: Allow
            Action:
              - lambda:InvokeFunction
              - lambda:Invoke
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ProvisioningFunctionName}'
          - Sid: iot
            Effect: Allow
            Action:
              - iot:ListThingPrincipals
              - iot:DescribeThing
            Resource:
              '*'
          - Sid: dynamodb1
            Effect: Allow
            Action:
              - dynamodb:GetShardIterator
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:GetRecords
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}/index/*'
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}/stream/*'
          - Sid: dynamodb2
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
            Resource:
              - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Table}'
          - Sid: greengrass
            Action:
              - 'greengrass:*'
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:greengrass:${AWS::Region}:${AWS::AccountId}:*'
          - Sid: iam
            Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - !GetAtt BulkDeploymentsExecutionRole.Arn

  BulkDeploymentsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: greengrass.amazonaws.com
          Action: sts:AssumeRole
      Path: "/cdf/greengrass/"
      Policies:
        - PolicyName: greengrass
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Sid: GreengrassBulkDeployments
                Effect: Allow
                Action: 'greengrass:*'
                Resource:
                  - '*'

  RESTLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/cdf/greengrass/"
      ManagedPolicyArns:
        - !Ref ApplicationPolicies
        - !If [ KmsKeyIdProvided, !Ref KmsPolicy, !Ref "AWS::NoValue" ]
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - BulkDeploymentsExecutionRole

  SQSLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/cdf/greengrass/"
      ManagedPolicyArns:
        - !Ref ApplicationPolicies
        - !If [ KmsKeyIdProvided, !Ref KmsPolicy, !Ref "AWS::NoValue" ]
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    DependsOn:
      - BulkDeploymentsExecutionRole

  RESTLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'cdf-greengrassProvisioning-rest-${Environment}'
      CodeUri: ../bundle.zip
      Handler: packages/services/greengrass-provisioning/dist/lambda_apigw_proxy.handler

      MemorySize: 128
      Role: !GetAtt RESTLambdaExecutionRole.Arn
      Runtime: nodejs14.x

      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        Fn::If:
        - DeployWithProvisionedCapacity
        - ProvisionedConcurrentExecutions: !Ref ProvisionedConcurrentExecutions
        - Ref: AWS::NoValue

      Timeout: 30
      Environment:
        Variables:
          NODE_CONFIG_DIR: 'packages/services/greengrass-provisioning/dist/config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE: !Ref Table
          GREENGRASS_PROVISIONING_AWS_GREENGRASS_BULKDEPLOYMENTS_ROLEARN: !GetAtt BulkDeploymentsExecutionRole.Arn
          GREENGRASS_PROVISIONING_AWS_SQS_DEVICEASSOCIATIONS: !Ref DeviceAssociationQueue
          GREENGRASS_PROVISIONING_AWS_SQS_DEPLOYMENTS: !Ref DeploymentsQueue
          GREENGRASS_PROVISIONING_AWS_SQS_BULKDEPLOYMENTSSTATUS: !Ref BulkDeploymentsStatusQueue
          GREENGRASS_PROVISIONING_AWS_SQS_DEPLOYMENTSTATUS: !Ref DeploymentStatusQueue
          GREENGRASS_PROVISIONING_PROVISIONING_APIFUNCTIONNAME: !Ref ProvisioningFunctionName
          GREENGRASS_PROVISIONING_AWS_SQS_GROUPTASKS: !Ref GroupTasksQueue
      Tracing: Active

      VpcConfig:
        Fn::If:
          - DeployInVPC
          - SubnetIds: !Ref PrivateSubNetIds
            SecurityGroupIds:
              - !Ref CDFSecurityGroupId
          - Ref: AWS::NoValue

      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
    DependsOn:
      - RESTLambdaExecutionRole

  SQSLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'cdf-greengrassProvisioning-sqs-${Environment}'
      CodeUri: ../bundle.zip
      Handler: packages/services/greengrass-provisioning/dist/lambda_sqs_proxy.handler

      MemorySize: 512
      Role: !GetAtt SQSLambdaExecutionRole.Arn
      Runtime: nodejs14.x

      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce
      ProvisionedConcurrencyConfig:
        Fn::If:
        - DeployWithProvisionedCapacity
        - ProvisionedConcurrentExecutions: !Ref ProvisionedConcurrentExecutions
        - Ref: AWS::NoValue

      Timeout: 900
      Environment:
        Variables:
          NODE_CONFIG_DIR: 'packages/services/greengrass-provisioning/dist/config'
          NODE_CONFIG: !Ref ApplicationConfigurationOverride
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
          GREENGRASS_PROVISIONING_AWS_DYNAMODB_TABLE: !Ref Table
          GREENGRASS_PROVISIONING_AWS_GREENGRASS_BULKDEPLOYMENTS_ROLEARN: !GetAtt BulkDeploymentsExecutionRole.Arn
          GREENGRASS_PROVISIONING_AWS_SQS_DEVICEASSOCIATIONS: !Ref DeviceAssociationQueue
          GREENGRASS_PROVISIONING_AWS_SQS_DEPLOYMENTS: !Ref DeploymentsQueue
          GREENGRASS_PROVISIONING_AWS_SQS_BULKDEPLOYMENTSSTATUS: !Ref BulkDeploymentsStatusQueue
          GREENGRASS_PROVISIONING_AWS_SQS_DEPLOYMENTSTATUS: !Ref DeploymentStatusQueue
          GREENGRASS_PROVISIONING_PROVISIONING_APIFUNCTIONNAME: !Ref ProvisioningFunctionName
          GREENGRASS_PROVISIONING_AWS_SQS_GROUPTASKS: !Ref GroupTasksQueue
      Tracing: Active

      Events:
        DeviceAssociationQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt DeviceAssociationQueue.Arn
            BatchSize: 5
        DeploymentsQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt DeploymentsQueue.Arn
            BatchSize: 1
        DeploymentStatusQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt DeploymentStatusQueue.Arn
            BatchSize: 5
        BulkDeploymentsStatusQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt BulkDeploymentsStatusQueue.Arn
            BatchSize: 1
        GroupTasksQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt GroupTasksQueue.Arn
            BatchSize: 1

    DependsOn:
      - SQSLambdaExecutionRole
      - DeploymentsQueue
      - DeploymentStatusQueue
      - DeviceAssociationQueue
      - BulkDeploymentsStatusQueue
      - GroupTasksQueue

  Table:
    Type: AWS::DynamoDB::Table
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "safely naming this resources to be unique by environment"
          - id: W73
            reason: "Can be decided by the customer, to specify the billing mode"
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        Fn::If:
          - KmsKeyIdProvided
          - KMSMasterKeyId: !Ref KmsKeyId
            SSEEnabled: true
            SSEType: KMS
          - Ref: AWS::NoValue
      TableName: !Sub 'cdf-greengrass-provisioning-${Environment}'
      KeySchema:
        -
          AttributeName: "pk"
          KeyType: "HASH"
        -
          AttributeName: "sk"
          KeyType: "RANGE"
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        -
          AttributeName: "sk"
          AttributeType: "S"
        -
          AttributeName: "si1Sort"
          AttributeType: "S"
        -
          AttributeName: "si2Hash"
          AttributeType: "S"
        -
          AttributeName: "templateName"
          AttributeType: "S"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        -
          IndexName: 'sk-si1Sort-index'
          KeySchema:
            -
              AttributeName: "sk"
              KeyType: "HASH"
            -
              AttributeName: "si1Sort"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
        -
          IndexName: 'si2Hash-sk-index'
          KeySchema:
            -
              AttributeName: "si2Hash"
              KeyType: "HASH"
            -
              AttributeName: "sk"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
        -
          IndexName: 'templateName-si1Sort-index'
          KeySchema:
            -
              AttributeName: "templateName"
              KeyType: "HASH"
            -
              AttributeName: "si1Sort"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"

  GroupTasksQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960

  DeviceAssociationQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DlqQueue.Arn
        maxReceiveCount: 10
      KmsMasterKeyId:
        Fn::If:
          - KmsKeyIdProvided
          - Ref: KmsKeyId
          - Ref: AWS::NoValue

  DeploymentsQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960
      KmsMasterKeyId:
        Fn::If:
          - KmsKeyIdProvided
          - Ref: KmsKeyId
          - Ref: AWS::NoValue

  DeploymentStatusQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DlqQueue.Arn
        maxReceiveCount: 10
      KmsMasterKeyId:
        Fn::If:
          - KmsKeyIdProvided
          - Ref: KmsKeyId
          - Ref: AWS::NoValue

  BulkDeploymentsStatusQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 604800
      VisibilityTimeout: 960
      KmsMasterKeyId:
        Fn::If:
          - KmsKeyIdProvided
          - Ref: KmsKeyId
          - Ref: AWS::NoValue

  DlqQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      KmsMasterKeyId:
        Fn::If:
          - KmsKeyIdProvided
          - Ref: KmsKeyId
          - Ref: AWS::NoValue

  DeploymentStatusQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service: events.amazonaws.com
            Action: SQS:SendMessage
            Resource: !GetAtt DeploymentStatusQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt GreengrassDeploymentStateChangeRule.Arn
      Queues:
        - !Ref DeploymentStatusQueue

  GreengrassDeploymentStateChangeRule:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Captures all Greengrass group deployment state changes.'
      EventPattern:
        source:
          - 'aws.greengrass'
        detail-type:
          - 'Greengrass Deployment Status Change'
      Name: !Sub 'cdf-gg-deployment-state-${Environment}'
      State: ENABLED
      Targets:
        - Arn: !GetAtt DeploymentStatusQueue.Arn
          Id: sqs

  # Optional auto-scaling configuration
  AutoScalingNestedStack:
    Type: AWS::CloudFormation::Stack
    Condition: DeployWithScaling
    Properties:
      TemplateURL: ./cfn-autoscaling.yml
      Parameters:
        RESTLambdaFunction: !Ref RESTLambdaFunction
        SQSLambdaFunction: !Ref SQSLambdaFunction
        DynamoDbTableName: !Ref Table
      TimeoutInMinutes: 5
    DependsOn:
    - RESTLambdaFunction
    - SQSLambdaFunction
    - Table

Outputs:
  BulkDeploymentsExecutionRoleArn:
    Description: BulkDeploymentsExecutionRole Arn
    Value: !GetAtt BulkDeploymentsExecutionRole.Arn
  RESTLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${RESTLambdaFunction}"
  SQSLambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${SQSLambdaFunction}"
  RESTLambdaArn:
    Description: REST API Lambda Arn
    Value: !Sub "${RESTLambdaFunction.Arn}"
    Export:
      Name: !Sub "cdf-greengrass-provisioning-${Environment}-RESTLambdaArn"
  RestApiFunctionName:
    Description: Events REST API lambda function name
    Value: !Ref RESTLambdaFunction
    Export:
      Name: !Sub 'cdf-greengrass-provisioning-${Environment}-restApiFunctionName'
  ApiGatewayUrl:
    Description: Events REST API URL
    Value: !Sub 'https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub 'cdf-greengrass-provisioning-${Environment}-apigatewayurl'
  ApiGatewayHost:
    Description: Events REST API host
    Value: !Sub '${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub 'cdf-greengrass-provisioning-${Environment}-apigatewayhost'
  ProvisioningTable:
    Description: greengrass provisioning dynamodb table
    Value: !Sub '${Table}'
    Export:
      Name: !Sub 'cdf-greengrass-provisioning-${Environment}-table'
